{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/hasher/Desktop/workspace/virtual-machine-configuration/src/StorageNetwork.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ButtonPair from './ButtonPair';\nimport StorageBlock from './StorageBlock';\nimport './StorageNetwork.css';\n\nfunction StorageNetwork(props) {\n  _s();\n\n  const [storagelist, setStoragelist] = useState([{\n    type: \"\",\n    volume: \"root\",\n    capacity: -1,\n    encrypted: false,\n    iops: 100,\n    backup: false,\n    remarks: \"\"\n  }]);\n  const [currentForm, setCurrentForm] = useState({\n    storage: [{\n      type: \"SSD\",\n      volume: \"root\",\n      capacity: -1,\n      encrypted: false,\n      iops: 100,\n      backup: false,\n      remarks: \"\"\n    }],\n    network: -1\n  });\n\n  function handleform() {\n    let list = [...currentForm.storage];\n    list.forEach(i => {\n      if (i.capacity === -1) {\n        i.capacity = 40;\n      }\n    });\n    props.handleform(currentForm);\n  }\n\n  function deletestorage(event) {\n    let list = [...storagelist];\n    console.log(event.target.value);\n    let x = list.splice(event.target.value, 1);\n    console.log(x);\n    console.log(list);\n    setStoragelist([...list]);\n  }\n\n  function addVolume() {\n    let objectestimation = { ...props.estimation\n    };\n    let itemlist = [objectestimation.items];\n    itemlist.push({\n      item: \"Ext - SSD\",\n      cost: 20\n    });\n    props.setEstimation({ ...estimation,\n      items: itemlist\n    });\n    let list = [...storagelist];\n    let element = {\n      type: \"SSD\",\n      volume: \"ext\",\n      capacity: -1,\n      encrypted: false,\n      iops: 100,\n      backup: false,\n      remarks: \"\"\n    };\n    list.push(element);\n    setStoragelist([...list]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [storagelist.map((i, key) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"postion\",\n      children: [/*#__PURE__*/_jsxDEV(StorageBlock, {\n        form: currentForm,\n        methodswork: true,\n        setCurrentForm: setCurrentForm,\n        storagelist: storagelist,\n        index: key,\n        setStoragelist: setStoragelist\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 6\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: i.volume !== \"root\" ? /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cross-btn\",\n          value: key,\n          onClick: deletestorage,\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 6\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"volume\",\n        onClick: addVolume,\n        children: \"Add Volume\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"heading-network\",\n        children: \"Network Bandwidth Configuration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"data\",\n        children: \"Outbounded Traffic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"slidecontainer\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"1\",\n          max: \"100\",\n          value: \"50\",\n          className: \"slider\",\n          id: \"myRange\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 8\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"network-range\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"256GB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"2TB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ButtonPair, {\n        firsttext: \"Back\",\n        firstfunction: props.resetPrev,\n        secondtext: \"Proceed\",\n        secondfunction: handleform\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 4\n  }, this);\n}\n\n_s(StorageNetwork, \"W5vOn8jFjHdgL6EvsZj4U8Z9nNo=\");\n\n_c = StorageNetwork;\nexport default StorageNetwork;\n\nvar _c;\n\n$RefreshReg$(_c, \"StorageNetwork\");","map":{"version":3,"sources":["/home/hasher/Desktop/workspace/virtual-machine-configuration/src/StorageNetwork.tsx"],"names":["React","useState","ButtonPair","StorageBlock","StorageNetwork","props","storagelist","setStoragelist","type","volume","capacity","encrypted","iops","backup","remarks","currentForm","setCurrentForm","storage","network","handleform","list","forEach","i","deletestorage","event","console","log","target","value","x","splice","addVolume","objectestimation","estimation","itemlist","items","push","item","cost","setEstimation","element","map","key","resetPrev"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Storage } from './App';\nimport ButtonPair from './ButtonPair';\nimport StorageBlock from './StorageBlock';\nimport './StorageNetwork.css';\n\n\n\nfunction StorageNetwork(props: any){\n\n  const [storagelist,setStoragelist]=useState<Storage[]>([{\n    type:\"\",\n    volume:\"root\",\n    capacity:-1,\n    encrypted:false,\n    iops:100,\n    backup:false,\n    remarks:\"\"}])\n  const [currentForm,setCurrentForm]=useState<any>({\n    storage:[{\n    type:\"SSD\",\n    volume:\"root\",\n    capacity:-1,\n    encrypted:false,\n    iops:100,\n    backup:false,\n    remarks:\"\"}],\n    network:-1});\n\n  function handleform(){\n    let list=[...currentForm.storage]\n    list.forEach((i)=>{if(i.capacity===-1){\n      i.capacity=40;\n    }})\n    props.handleform(currentForm);\n  }\n\n  function deletestorage(event:any){\n      let list=[...storagelist]\n      console.log(event.target.value)      \n      let x=list.splice(event.target.value,1);\n      console.log(x);\n      console.log(list)\n      setStoragelist([...list]) \n  }\n\n  function addVolume(){\n      let objectestimation={...props.estimation}\n      let itemlist=[objectestimation.items]\n      itemlist.push({item:\"Ext - SSD\",cost:20}) \n      props.setEstimation({...estimation,items:itemlist})\n      let list=[...storagelist]\n      let element={\n        type:\"SSD\",\n        volume:\"ext\",\n        capacity:-1,\n        encrypted:false,\n        iops:100,\n        backup:false,\n        remarks:\"\"}\n        list.push(element); \n        setStoragelist([...list]) \n  }\n\n  return(\n   <div>\n     {\n       storagelist.map((i:any,key:number)=>(\n     <div className=\"postion\">\n     <StorageBlock form={currentForm} methodswork={true} setCurrentForm={setCurrentForm} storagelist={storagelist} index={key} setStoragelist={setStoragelist}/>\n     <div>\n       {\n       i.volume!==\"root\"?\n          <button className=\"cross-btn\" value={key} onClick={deletestorage}>X</button>\n          :null\n       }           \n     </div>\n     </div>\n       ))\n      }\n     <div>\n       <button className=\"volume\" onClick={addVolume}>Add Volume</button>\n     </div> \n     <div> \n       <h1 className=\"heading-network\">Network Bandwidth Configuration</h1>\n       <p className=\"data\">Outbounded Traffic</p>\n       <div className=\"slidecontainer\">\n        <input type=\"range\" min=\"1\" max=\"100\" value=\"50\" className=\"slider\" id=\"myRange\"/>\n        </div>\n        <div className=\"network-range\">\n            <p>256GB</p><p>2TB</p>\n        </div>\n     </div>\n     <div> \n       <ButtonPair firsttext=\"Back\" firstfunction={props.resetPrev} secondtext=\"Proceed\" secondfunction={handleform} />\n     </div>\n    </div> \n  )\n  } \n\nexport default StorageNetwork;"]},"metadata":{},"sourceType":"module"}